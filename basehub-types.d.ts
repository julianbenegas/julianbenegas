/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

/*=============================================================================
 * This file was automatically generated by the BaseHub SDK and contains type
 * definitions based on your repository schema. Credits to https://genql.dev/
 * for the type generation.
 *
 * You can safely commit this to version control.
 *============================================================================*/

declare module "basehub" {
  export interface Query extends _Query {}
  export interface QueryGenqlSelection extends _QueryGenqlSelection {}
  export interface Mutation extends _Mutation {}
  export interface MutationGenqlSelection extends _MutationGenqlSelection {}
  export interface FragmentsMap extends _FragmentsMap {}
  export interface Scalars extends _Scalars {}
}

import type { Transaction } from 'basehub/api-transaction'

interface _Query extends Query {}
interface _QueryGenqlSelection extends QueryGenqlSelection {}
interface _Mutation extends Mutation {}
interface _MutationGenqlSelection extends MutationGenqlSelection {}
interface _FragmentsMap extends FragmentsMap {}
interface _Scalars extends Scalars {}

export interface Scalars {
    BSHBEventSchema: ({
  name: string;
  required: boolean;
  placeholder?: string;
  defaultValue?: string;
  helpText?: string
} & {
  id: string;
  label: string
} & ({
  type: "text" | "textarea" | "number" | "date" | "datetime" | "email" | "checkbox" | "hidden"
} | {
  type: "select" | "radio";
  options: string[];
  multiple: boolean
} | {
  type: "file";
  private: boolean
}))[],
    BSHBRichTextContentSchema: RichTextNode[],
    BSHBRichTextTOCSchema: RichTextTocNode[],
    BSHBSelect_1492853512: 'Info',
    BSHBSelect_1780821475: 'Definition',
    BSHBSelect__1970461833: 'Pencil1Icon' | 'ReaderIcon' | 'Link2Icon' | 'X',
    Boolean: boolean,
    CodeSnippetLanguage: B_Language,
    DateTime: any,
    Float: number,
    ID: string,
    Int: number,
    JSON: any,
    String: string,
    bshb_event_1941782718: `bshb_event_1941782718:${string}`,
    schema_bshb_event_1941782718: never,
    bshb_event__128096245: `bshb_event__128096245:${string}`,
    schema_bshb_event__128096245: never,
    bshb_event__878360628: `bshb_event__878360628:${string}`,
    schema_bshb_event__878360628: {email: string;},
}

export type AnalyticsKeyScope = 'query' | 'send'

export interface BaseRichTextJson {
    blocks: Scalars['String']
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'BaseRichTextJson'
}

export interface Bio {
    html: Scalars['String']
    json: BioRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Bio'
}

export interface BioRichText {
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'BioRichText'
}

export interface BlockAudio {
    /** The duration of the audio in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration: Scalars['Float']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    __typename: 'BlockAudio'
}

export interface BlockCodeSnippet {
    allowedLanguages: Scalars['CodeSnippetLanguage'][]
    code: Scalars['String']
    /** @deprecated Figuring out the correct api. */
    html: Scalars['String']
    language: Scalars['CodeSnippetLanguage']
    __typename: 'BlockCodeSnippet'
}

export interface BlockColor {
    b: Scalars['Int']
    g: Scalars['Int']
    hex: Scalars['String']
    hsl: Scalars['String']
    r: Scalars['Int']
    rgb: Scalars['String']
    __typename: 'BlockColor'
}

export type BlockDocument = (CalloutComponent | Components | Fonts | Header | Index | LinkComponent | Links | MetaComponent | NavLinks | NewsletterSection | NowSection | PopoverComponent | Posts | PostsItem | PostsSection | SectionHeaderComponent | Settings | WriteComponent | _AgentStart | calloutComponent_AsList | linkComponent_AsList | metaComponent_AsList | popoverComponent_AsList | postsItem_AsList | sectionHeaderComponent_AsList | writeComponent_AsList) & { __isUnion?: true }

export interface BlockDocumentSys {
    apiNamePath: Scalars['String']
    createdAt: Scalars['String']
    hash: Scalars['String']
    id: Scalars['ID']
    idPath: Scalars['String']
    lastModifiedAt: Scalars['String']
    slug: Scalars['String']
    slugPath: Scalars['String']
    title: Scalars['String']
    __typename: 'BlockDocumentSys'
}

export interface BlockFile {
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    __typename: 'BlockFile'
}

export interface BlockImage {
    alt: (Scalars['String'] | null)
    aspectRatio: Scalars['String']
    blurDataURL: Scalars['String']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    height: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    /** @deprecated Renamed to `blurDataURL` to match Next.js Image's naming convention. */
    placeholderURL: Scalars['String']
    /** @deprecated Use `url` instead. */
    rawUrl: Scalars['String']
    thumbhash: Scalars['String']
    /**
     * This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:
     * 
     * ```graphql
     * {
     *   imageBlock {
     *     url(width: 200, height: 200)
     *   }
     * }
     * ```
     * 
     * This will return the URL with the width and height set to 200 pixels.
     * 
     * BaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).
     * 
     */
    url: Scalars['String']
    width: Scalars['Int']
    __typename: 'BlockImage'
}

export type BlockList = (Links | NavLinks | Posts | calloutComponent_AsList | linkComponent_AsList | metaComponent_AsList | popoverComponent_AsList | postsItem_AsList | sectionHeaderComponent_AsList | writeComponent_AsList) & { __isUnion?: true }

export interface BlockOgImage {
    height: Scalars['Int']
    url: Scalars['String']
    width: Scalars['Int']
    __typename: 'BlockOgImage'
}


/** Rich text block */
export type BlockRichText = (Bio | Body | Content | Content_1 | Subtitle) & { __isUnion?: true }

export interface BlockVideo {
    aspectRatio: Scalars['String']
    /** The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration: Scalars['Float']
    fileName: Scalars['String']
    fileSize: Scalars['Int']
    height: Scalars['Int']
    lastModified: Scalars['Float']
    mimeType: Scalars['String']
    url: Scalars['String']
    width: Scalars['Int']
    __typename: 'BlockVideo'
}

export interface Body {
    html: Scalars['String']
    json: BodyRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Body'
}

export interface BodyRichText {
    blocks: UnionCalloutComponentPopoverComponent[]
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'BodyRichText'
}

export interface CalloutComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    content: Content_1
    intent: Scalars['BSHBSelect_1492853512']
    __typename: 'CalloutComponent'
}

export type CalloutComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'content__ASC' | 'content__DESC' | 'intent__ASC' | 'intent__DESC'

export interface Clicks {
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey: Scalars['bshb_event_1941782718']
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey: Scalars['bshb_event_1941782718']
    schema: Scalars['BSHBEventSchema']
    __typename: 'Clicks'
}

export interface Components {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    __typename: 'Components'
}

export interface Content {
    html: Scalars['String']
    json: ContentRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Content'
}

export interface ContentRichText {
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'ContentRichText'
}

export interface Content_1 {
    html: Scalars['String']
    json: Content_1RichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Content_1'
}

export interface Content_1RichText {
    blocks: UnionPopoverComponent[]
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'Content_1RichText'
}

export interface Fonts {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    geist400: BlockFile
    geist500: BlockFile
    __typename: 'Fonts'
}

export interface GetUploadSignedURL {
    signedURL: Scalars['String']
    uploadURL: Scalars['String']
    __typename: 'GetUploadSignedURL'
}

export interface Header {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    navLinks: NavLinks
    __typename: 'Header'
}

export interface Index {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    avatar: BlockImage
    bio: Bio
    newsletterSection: NewsletterSection
    nowSection: NowSection
    postsSection: PostsSection
    title: Scalars['String']
    __typename: 'Index'
}

export interface LinkComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    highlight: Scalars['Boolean']
    href: Scalars['String']
    isExternal: Scalars['Boolean']
    label: Scalars['String']
    __typename: 'LinkComponent'
}

export type LinkComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'highlight__ASC' | 'highlight__DESC' | 'href__ASC' | 'href__DESC' | 'isExternal__ASC' | 'isExternal__DESC' | 'label__ASC' | 'label__DESC'

export interface Links {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (WriteComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: WriteComponent[]
    __typename: 'Links'
}

export interface ListMeta {
    /** Number of items after applying filters but before pagination */
    filteredCount: Scalars['Int']
    /** Total number of items in collection before any filtering/pagination */
    totalCount: Scalars['Int']
    __typename: 'ListMeta'
}

export type MediaBlock = (BlockAudio | BlockFile | BlockImage | BlockVideo) & { __isUnion?: true }

export type MediaBlockUnion = (BlockAudio | BlockFile | BlockImage | BlockVideo) & { __isUnion?: true }

export interface MetaComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    description: Scalars['String']
    ogImage: BlockOgImage
    title: Scalars['String']
    xUsername: Scalars['String']
    __typename: 'MetaComponent'
}

export type MetaComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'description__ASC' | 'description__DESC' | 'ogImage__ASC' | 'ogImage__DESC' | 'title__ASC' | 'title__DESC' | 'xUsername__ASC' | 'xUsername__DESC'

export interface Mutation {
    /**
     * Returns a signed url and an upload url so that you can upload files into your repository.
     * 
     * Example usage with JavaScript:
     * ```js
     * async function handleUpload(file: File) {
     *   const { getUploadSignedURL } = await basehub().mutation({
     *     getUploadSignedURL: {
     *       __args: { fileName: file.name },
     *       signedURL: true,
     *       uploadURL: true,
     *     }
     *   })
     * 
     *   const { signedURL, uploadURL } = getUploadSignedURL
     * 
     *   await fetch(signedURL, { method: 'PUT', body: file })
     * 
     *   // done! do something with the uploadURL now
     * }
     * ```
     * 
     */
    getUploadSignedURL: GetUploadSignedURL
    /** Start a job that can be awaited and the result given directly. Under the hood, it runs `transactionAsync` and polls for the result until it is available. You can pass a `timeout` argument, the default being 30_000ms. */
    transaction: TransactionStatus
    /** Start an asynchronous job to mutate BaseHub data. Returns a transaction ID which you can use to get the result of the job. */
    transactionAsync: Scalars['String']
    transactionStatus: TransactionStatus
    __typename: 'Mutation'
}

export interface NavLinks {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (LinkComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: LinkComponent[]
    __typename: 'NavLinks'
}

export interface NewsletterSection {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    buttonText: Scalars['String']
    emailPlaceholder: Scalars['String']
    sectionHeader: SectionHeaderComponent
    signups: Signups
    __typename: 'NewsletterSection'
}

export interface NowSection {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    links: Links
    sectionHeader: SectionHeaderComponent
    __typename: 'NowSection'
}

export interface PopoverComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    content: Content
    type: Scalars['BSHBSelect_1780821475']
    __typename: 'PopoverComponent'
}

export type PopoverComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'content__ASC' | 'content__DESC' | 'type__ASC' | 'type__DESC'

export interface Posts {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (PostsItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: PostsItem[]
    __typename: 'Posts'
}

export interface PostsItem {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    body: Body
    /** ISO 8601 date string. */
    date: Scalars['String']
    excerpt: (Scalars['String'] | null)
    ogImage: BlockOgImage
    views: Views
    xPost: (Scalars['String'] | null)
    __typename: 'PostsItem'
}

export type PostsItemOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'body__ASC' | 'body__DESC' | 'date__ASC' | 'date__DESC' | 'excerpt__ASC' | 'excerpt__DESC' | 'ogImage__ASC' | 'ogImage__DESC' | 'views__ASC' | 'views__DESC' | 'xPost__ASC' | 'xPost__DESC'

export interface PostsSection {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    header: SectionHeaderComponent
    posts: Posts
    __typename: 'PostsSection'
}

export interface Query {
    _agent: (_AgentStart | null)
    /** Query across the custom AI agents in the repository. */
    _agents: _agents
    /** Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key. */
    _componentInstances: _components
    /** The structure of the repository. Used by START. */
    _structure: Scalars['JSON']
    _sys: RepoSys
    components: Components
    index: Index
    settings: Settings
    __typename: 'Query'
}

export interface RepoSys {
    branches: _Branches
    hash: Scalars['String']
    id: Scalars['ID']
    playgroundInfo: (_PlaygroundInfo | null)
    slug: Scalars['String']
    title: Scalars['String']
    __typename: 'RepoSys'
}

export type RichTextJson = (BaseRichTextJson | BioRichText | BodyRichText | ContentRichText | Content_1RichText | SubtitleRichText) & { __isUnion?: true }

export interface SectionHeaderComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    subtitle: (Subtitle | null)
    title: Scalars['String']
    __typename: 'SectionHeaderComponent'
}

export type SectionHeaderComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'subtitle__ASC' | 'subtitle__DESC' | 'title__ASC' | 'title__DESC'

export interface Settings {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    fonts: Fonts
    header: Header
    meta: MetaComponent
    __typename: 'Settings'
}

export interface Signups {
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey: Scalars['bshb_event__878360628']
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey: Scalars['bshb_event__878360628']
    schema: Scalars['BSHBEventSchema']
    __typename: 'Signups'
}

export interface Subtitle {
    html: Scalars['String']
    json: SubtitleRichText
    markdown: Scalars['String']
    plainText: Scalars['String']
    readingTime: Scalars['Int']
    __typename: 'Subtitle'
}

export interface SubtitleRichText {
    content: Scalars['BSHBRichTextContentSchema']
    toc: Scalars['BSHBRichTextTOCSchema']
    __typename: 'SubtitleRichText'
}

export interface TransactionStatus {
    /** Duration in milliseconds. */
    duration: (Scalars['Int'] | null)
    endedAt: (Scalars['String'] | null)
    id: Scalars['String']
    message: (Scalars['String'] | null)
    startedAt: Scalars['String']
    status: TransactionStatusEnum
    __typename: 'TransactionStatus'
}

export type TransactionStatusEnum = 'Cancelled' | 'Completed' | 'Failed' | 'Running' | 'Scheduled'

export type UnionCalloutComponentPopoverComponent = (CalloutComponent | PopoverComponent) & { __isUnion?: true }

export type UnionPopoverComponent = (PopoverComponent) & { __isUnion?: true }

export interface Variant {
    apiName: Scalars['String']
    color: Scalars['String']
    id: Scalars['String']
    isDefault: Scalars['Boolean']
    label: Scalars['String']
    __typename: 'Variant'
}

export interface Views {
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey: Scalars['bshb_event__128096245']
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey: Scalars['bshb_event__128096245']
    schema: Scalars['BSHBEventSchema']
    __typename: 'Views'
}

export interface WriteComponent {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    clicks: Clicks
    href: (Scalars['String'] | null)
    icon: (Scalars['BSHBSelect__1970461833'] | null)
    label: Scalars['String']
    __typename: 'WriteComponent'
}

export type WriteComponentOrderByEnum = '_sys_createdAt__ASC' | '_sys_createdAt__DESC' | '_sys_hash__ASC' | '_sys_hash__DESC' | '_sys_id__ASC' | '_sys_id__DESC' | '_sys_lastModifiedAt__ASC' | '_sys_lastModifiedAt__DESC' | '_sys_slug__ASC' | '_sys_slug__DESC' | '_sys_title__ASC' | '_sys_title__DESC' | 'clicks__ASC' | 'clicks__DESC' | 'href__ASC' | 'href__DESC' | 'icon__ASC' | 'icon__DESC' | 'label__ASC' | 'label__DESC'

export interface _AgentStart {
    _agentKey: Scalars['String']
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    accent: Scalars['String']
    avatar: Scalars['String']
    chatUrl: Scalars['String']
    commit: Scalars['Boolean']
    description: Scalars['String']
    edit: Scalars['Boolean']
    embedUrl: Scalars['String']
    getUserInfo: Scalars['Boolean']
    grayscale: Scalars['String']
    manageBranches: Scalars['Boolean']
    mcpUrl: Scalars['String']
    model: Scalars['String']
    searchTheWeb: Scalars['Boolean']
    slackInstallUrl: Scalars['String']
    systemPrompt: Scalars['String']
    __typename: '_AgentStart'
}

export interface _BranchInfo {
    archivedAt: (Scalars['String'] | null)
    archivedBy: (Scalars['String'] | null)
    authorId: (Scalars['String'] | null)
    contributors: (Scalars['String'][] | null)
    createdAt: Scalars['String']
    description: (Scalars['String'] | null)
    git: (_GitInfo | null)
    headCommit: (_CommitInfo | null)
    headCommitId: (Scalars['String'] | null)
    id: Scalars['ID']
    inlineSuggestionAppliedAt: (Scalars['String'] | null)
    isDefault: Scalars['Boolean']
    isInlineSuggestion: (Scalars['Boolean'] | null)
    name: Scalars['String']
    playgroundId: (Scalars['String'] | null)
    rollbackCommitId: (Scalars['String'] | null)
    rollbackIsoDate: (Scalars['String'] | null)
    sourceBranchId: (Scalars['String'] | null)
    updatedAt: (Scalars['String'] | null)
    workingRootBlockId: (Scalars['String'] | null)
    __typename: '_BranchInfo'
}

export interface _Branches {
    _meta: ListMeta
    items: _BranchInfo[]
    __typename: '_Branches'
}

export interface _CommitInfo {
    authorId: Scalars['String']
    branchId: Scalars['String']
    contributors: (Scalars['String'][] | null)
    createdAt: Scalars['String']
    hash: Scalars['String']
    id: Scalars['String']
    mergeParentCommitId: (Scalars['String'] | null)
    message: Scalars['String']
    parentCommitId: (Scalars['String'] | null)
    /** Whether this commit is from a playground branch. */
    playgroundId: (Scalars['String'] | null)
    repoId: Scalars['String']
    rootBlockId: Scalars['String']
    __typename: '_CommitInfo'
}

export interface _GitInfo {
    branch: Scalars['String']
    deploymentUrl: (Scalars['String'] | null)
    __typename: '_GitInfo'
}

export interface _PlaygroundInfo {
    claimUrl: (Scalars['String'] | null)
    editUrl: Scalars['String']
    expiresAt: (Scalars['String'] | null)
    id: (Scalars['String'] | null)
    __typename: '_PlaygroundInfo'
}

export type _ResolveTargetsWithEnum = 'id' | 'objectName'

export type _StructureFormatEnum = 'json' | 'xml'

export interface _agents {
    start: _AgentStart
    __typename: '_agents'
}

export interface _components {
    callout: calloutComponent_AsList
    link: linkComponent_AsList
    meta: metaComponent_AsList
    popover: popoverComponent_AsList
    postsItem: postsItem_AsList
    sectionHeader: sectionHeaderComponent_AsList
    write: writeComponent_AsList
    __typename: '_components'
}

export interface calloutComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (CalloutComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: CalloutComponent[]
    __typename: 'calloutComponent_AsList'
}

export interface linkComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (LinkComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: LinkComponent[]
    __typename: 'linkComponent_AsList'
}

export interface metaComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (MetaComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: MetaComponent[]
    __typename: 'metaComponent_AsList'
}

export interface popoverComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (PopoverComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: PopoverComponent[]
    __typename: 'popoverComponent_AsList'
}

export interface postsItem_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (PostsItem | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: PostsItem[]
    __typename: 'postsItem_AsList'
}

export interface sectionHeaderComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (SectionHeaderComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: SectionHeaderComponent[]
    __typename: 'sectionHeaderComponent_AsList'
}

export interface writeComponent_AsList {
    _analyticsKey: Scalars['String']
    _dashboardUrl: Scalars['String']
    _id: Scalars['String']
    _idPath: Scalars['String']
    _meta: ListMeta
    /** The key used to search from the frontend. */
    _searchKey: Scalars['String']
    _slug: Scalars['String']
    _slugPath: Scalars['String']
    _sys: BlockDocumentSys
    _title: Scalars['String']
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item: (WriteComponent | null)
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items: WriteComponent[]
    __typename: 'writeComponent_AsList'
}

export interface BaseRichTextJsonGenqlSelection{
    blocks?: boolean | number
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface BioGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: BioRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
}

export interface BioRichTextGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface BlockAudioGenqlSelection{
    /** The duration of the audio in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    __typename?: boolean | number
}

export interface BlockCodeSnippetGenqlSelection{
    allowedLanguages?: boolean | number
    code?: boolean | number
    /** @deprecated Figuring out the correct api. */
    html?: { __args: {
    /** Theme for the code snippet */
    theme?: (Scalars['String'] | null)} } | boolean | number
    language?: boolean | number
    __typename?: boolean | number
}

export interface BlockColorGenqlSelection{
    b?: boolean | number
    g?: boolean | number
    hex?: boolean | number
    hsl?: boolean | number
    r?: boolean | number
    rgb?: boolean | number
    __typename?: boolean | number
}

export interface BlockDocumentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    on_CalloutComponent?: CalloutComponentGenqlSelection
    on_Components?: ComponentsGenqlSelection
    on_Fonts?: FontsGenqlSelection
    on_Header?: HeaderGenqlSelection
    on_Index?: IndexGenqlSelection
    on_LinkComponent?: LinkComponentGenqlSelection
    on_Links?: LinksGenqlSelection
    on_MetaComponent?: MetaComponentGenqlSelection
    on_NavLinks?: NavLinksGenqlSelection
    on_NewsletterSection?: NewsletterSectionGenqlSelection
    on_NowSection?: NowSectionGenqlSelection
    on_PopoverComponent?: PopoverComponentGenqlSelection
    on_Posts?: PostsGenqlSelection
    on_PostsItem?: PostsItemGenqlSelection
    on_PostsSection?: PostsSectionGenqlSelection
    on_SectionHeaderComponent?: SectionHeaderComponentGenqlSelection
    on_Settings?: SettingsGenqlSelection
    on_WriteComponent?: WriteComponentGenqlSelection
    on__AgentStart?: _AgentStartGenqlSelection
    on_calloutComponent_AsList?: calloutComponent_AsListGenqlSelection
    on_linkComponent_AsList?: linkComponent_AsListGenqlSelection
    on_metaComponent_AsList?: metaComponent_AsListGenqlSelection
    on_popoverComponent_AsList?: popoverComponent_AsListGenqlSelection
    on_postsItem_AsList?: postsItem_AsListGenqlSelection
    on_sectionHeaderComponent_AsList?: sectionHeaderComponent_AsListGenqlSelection
    on_writeComponent_AsList?: writeComponent_AsListGenqlSelection
    __typename?: boolean | number
}

export interface BlockDocumentSysGenqlSelection{
    apiNamePath?: boolean | number
    createdAt?: boolean | number
    hash?: boolean | number
    id?: boolean | number
    idPath?: boolean | number
    lastModifiedAt?: boolean | number
    slug?: boolean | number
    slugPath?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
}

export interface BlockFileGenqlSelection{
    fileName?: boolean | number
    fileSize?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    __typename?: boolean | number
}

export interface BlockImageGenqlSelection{
    alt?: boolean | number
    aspectRatio?: boolean | number
    blurDataURL?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    height?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    /** @deprecated Renamed to `blurDataURL` to match Next.js Image's naming convention. */
    placeholderURL?: boolean | number
    /** @deprecated Use `url` instead. */
    rawUrl?: boolean | number
    thumbhash?: boolean | number
    /**
     * This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:
     * 
     * ```graphql
     * {
     *   imageBlock {
     *     url(width: 200, height: 200)
     *   }
     * }
     * ```
     * 
     * This will return the URL with the width and height set to 200 pixels.
     * 
     * BaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).
     * 
     */
    url?: { __args: {anim?: (Scalars['String'] | null), background?: (Scalars['String'] | null), blur?: (Scalars['Int'] | null), border?: (Scalars['String'] | null), brightness?: (Scalars['Int'] | null), compression?: (Scalars['String'] | null), contrast?: (Scalars['Int'] | null), dpr?: (Scalars['Int'] | null), fit?: (Scalars['String'] | null), format?: (Scalars['String'] | null), gamma?: (Scalars['String'] | null), gravity?: (Scalars['String'] | null), height?: (Scalars['Int'] | null), metadata?: (Scalars['String'] | null), quality?: (Scalars['Int'] | null), rotate?: (Scalars['String'] | null), sharpen?: (Scalars['String'] | null), trim?: (Scalars['String'] | null), width?: (Scalars['Int'] | null)} } | boolean | number
    width?: boolean | number
    __typename?: boolean | number
}

export interface BlockListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    on_Links?: LinksGenqlSelection
    on_NavLinks?: NavLinksGenqlSelection
    on_Posts?: PostsGenqlSelection
    on_calloutComponent_AsList?: calloutComponent_AsListGenqlSelection
    on_linkComponent_AsList?: linkComponent_AsListGenqlSelection
    on_metaComponent_AsList?: metaComponent_AsListGenqlSelection
    on_popoverComponent_AsList?: popoverComponent_AsListGenqlSelection
    on_postsItem_AsList?: postsItem_AsListGenqlSelection
    on_sectionHeaderComponent_AsList?: sectionHeaderComponent_AsListGenqlSelection
    on_writeComponent_AsList?: writeComponent_AsListGenqlSelection
    __typename?: boolean | number
}

export interface BlockOgImageGenqlSelection{
    height?: boolean | number
    url?: boolean | number
    width?: boolean | number
    __typename?: boolean | number
}


/** Rich text block */
export interface BlockRichTextGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: RichTextJsonGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    on_Bio?: BioGenqlSelection
    on_Body?: BodyGenqlSelection
    on_Content?: ContentGenqlSelection
    on_Content_1?: Content_1GenqlSelection
    on_Subtitle?: SubtitleGenqlSelection
    __typename?: boolean | number
}

export interface BlockVideoGenqlSelection{
    aspectRatio?: boolean | number
    /** The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size. */
    duration?: boolean | number
    fileName?: boolean | number
    fileSize?: boolean | number
    height?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    width?: boolean | number
    __typename?: boolean | number
}

export interface BodyGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: BodyRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
}

export interface BodyRichTextGenqlSelection{
    blocks?: UnionCalloutComponentPopoverComponentGenqlSelection
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface CalloutComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    content?: Content_1GenqlSelection
    intent?: boolean | number
    __typename?: boolean | number
}

export interface CalloutComponentFilterInput {AND?: (CalloutComponentFilterInput | null),OR?: (CalloutComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),intent?: (SelectFilter | null)}

export interface ClicksGenqlSelection{
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey?: boolean | number
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey?: boolean | number
    schema?: boolean | number
    __typename?: boolean | number
}

export interface ComponentsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    __typename?: boolean | number
}

export interface ContentGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: ContentRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
}

export interface ContentRichTextGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface Content_1GenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: Content_1RichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
}

export interface Content_1RichTextGenqlSelection{
    blocks?: UnionPopoverComponentGenqlSelection
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface DateFilter {eq?: (Scalars['DateTime'] | null),isAfter?: (Scalars['DateTime'] | null),isBefore?: (Scalars['DateTime'] | null),isNull?: (Scalars['Boolean'] | null),neq?: (Scalars['DateTime'] | null),onOrAfter?: (Scalars['DateTime'] | null),onOrBefore?: (Scalars['DateTime'] | null)}

export interface FontsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    geist400?: BlockFileGenqlSelection
    geist500?: BlockFileGenqlSelection
    __typename?: boolean | number
}

export interface GetUploadSignedURLGenqlSelection{
    signedURL?: boolean | number
    uploadURL?: boolean | number
    __typename?: boolean | number
}

export interface HeaderGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    navLinks?: (NavLinksGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (LinkComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (LinkComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
}

export interface IndexGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    avatar?: BlockImageGenqlSelection
    bio?: BioGenqlSelection
    newsletterSection?: NewsletterSectionGenqlSelection
    nowSection?: NowSectionGenqlSelection
    postsSection?: PostsSectionGenqlSelection
    title?: boolean | number
    __typename?: boolean | number
}

export interface LinkComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    highlight?: boolean | number
    href?: boolean | number
    isExternal?: boolean | number
    label?: boolean | number
    __typename?: boolean | number
}

export interface LinkComponentFilterInput {AND?: (LinkComponentFilterInput | null),OR?: (LinkComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),highlight?: (Scalars['Boolean'] | null),href?: (StringFilter | null),isExternal?: (Scalars['Boolean'] | null),label?: (StringFilter | null)}

export interface LinksGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: WriteComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: WriteComponentGenqlSelection
    __typename?: boolean | number
}

export interface ListFilter {isEmpty?: (Scalars['Boolean'] | null),length?: (Scalars['Int'] | null)}

export interface ListMetaGenqlSelection{
    /** Number of items after applying filters but before pagination */
    filteredCount?: boolean | number
    /** Total number of items in collection before any filtering/pagination */
    totalCount?: boolean | number
    __typename?: boolean | number
}

export interface MediaBlockGenqlSelection{
    fileName?: boolean | number
    fileSize?: boolean | number
    lastModified?: boolean | number
    mimeType?: boolean | number
    url?: boolean | number
    on_BlockAudio?: BlockAudioGenqlSelection
    on_BlockFile?: BlockFileGenqlSelection
    on_BlockImage?: BlockImageGenqlSelection
    on_BlockVideo?: BlockVideoGenqlSelection
    __typename?: boolean | number
}

export interface MediaBlockUnionGenqlSelection{
    on_BlockAudio?:BlockAudioGenqlSelection,
    on_BlockFile?:BlockFileGenqlSelection,
    on_BlockImage?:BlockImageGenqlSelection,
    on_BlockVideo?:BlockVideoGenqlSelection,
    on_MediaBlock?: MediaBlockGenqlSelection,
    __typename?: boolean | number
}

export interface MetaComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    description?: boolean | number
    ogImage?: BlockOgImageGenqlSelection
    title?: boolean | number
    xUsername?: boolean | number
    __typename?: boolean | number
}

export interface MetaComponentFilterInput {AND?: (MetaComponentFilterInput | null),OR?: (MetaComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),description?: (StringFilter | null),title?: (StringFilter | null),xUsername?: (StringFilter | null)}

export interface MutationGenqlSelection{
    /**
     * Returns a signed url and an upload url so that you can upload files into your repository.
     * 
     * Example usage with JavaScript:
     * ```js
     * async function handleUpload(file: File) {
     *   const { getUploadSignedURL } = await basehub().mutation({
     *     getUploadSignedURL: {
     *       __args: { fileName: file.name },
     *       signedURL: true,
     *       uploadURL: true,
     *     }
     *   })
     * 
     *   const { signedURL, uploadURL } = getUploadSignedURL
     * 
     *   await fetch(signedURL, { method: 'PUT', body: file })
     * 
     *   // done! do something with the uploadURL now
     * }
     * ```
     * 
     */
    getUploadSignedURL?: (GetUploadSignedURLGenqlSelection & { __args: {
    /** SHA256 hash of the file. Used for reusing existing files. */
    fileHash?: (Scalars['String'] | null), 
    /** The file name */
    fileName: Scalars['String']} })
    /** Start a job that can be awaited and the result given directly. Under the hood, it runs `transactionAsync` and polls for the result until it is available. You can pass a `timeout` argument, the default being 30_000ms. */
    transaction?: (TransactionStatusGenqlSelection & { __args: {
    /** The ID of the author of the transaction. If not provided, the API Token will be used. */
    authorId?: (Scalars['String'] | null), 
    /** Auto make a commit in your Repo with the specified message. */
    autoCommit?: (Scalars['String'] | null), 
    /** Transaction data. */
    data: Transaction | Scalars['String'], 
    /** Skip running workflows and event subscribers. Defaults to false. */
    skipWorkflows?: (Scalars['Boolean'] | null), 
    /** Timeout in milliseconds. */
    timeout?: (Scalars['Int'] | null)} })
    /** Start an asynchronous job to mutate BaseHub data. Returns a transaction ID which you can use to get the result of the job. */
    transactionAsync?: { __args: {
    /** The ID of the author of the transaction. If not provided, the API Token will be used. */
    authorId?: (Scalars['String'] | null), 
    /** Auto make a commit in your Repo with the specified message. */
    autoCommit?: (Scalars['String'] | null), 
    /** Transaction data. */
    data: Scalars['String'], 
    /** Skip running workflows and event subscribers. Defaults to false. */
    skipWorkflows?: (Scalars['Boolean'] | null)} }
    transactionStatus?: (TransactionStatusGenqlSelection & { __args: {
    /** Transaction ID */
    id: Scalars['String']} })
    __typename?: boolean | number
}

export interface NavLinksGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: LinkComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: LinkComponentGenqlSelection
    __typename?: boolean | number
}

export interface NewsletterSectionGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    buttonText?: boolean | number
    emailPlaceholder?: boolean | number
    sectionHeader?: SectionHeaderComponentGenqlSelection
    signups?: SignupsGenqlSelection
    __typename?: boolean | number
}

export interface NowSectionGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    links?: (LinksGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (WriteComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (WriteComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    sectionHeader?: SectionHeaderComponentGenqlSelection
    __typename?: boolean | number
}

export interface NumberFilter {eq?: (Scalars['Float'] | null),gt?: (Scalars['Float'] | null),gte?: (Scalars['Float'] | null),isNull?: (Scalars['Boolean'] | null),lt?: (Scalars['Float'] | null),lte?: (Scalars['Float'] | null),neq?: (Scalars['Float'] | null)}

export interface PopoverComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    content?: ContentGenqlSelection
    type?: boolean | number
    __typename?: boolean | number
}

export interface PopoverComponentFilterInput {AND?: (PopoverComponentFilterInput | null),OR?: (PopoverComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),type?: (SelectFilter | null)}

export interface PostsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: PostsItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: PostsItemGenqlSelection
    __typename?: boolean | number
}

export interface PostsItemGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    body?: BodyGenqlSelection
    /** ISO 8601 date string. */
    date?: boolean | number
    excerpt?: boolean | number
    ogImage?: BlockOgImageGenqlSelection
    views?: ViewsGenqlSelection
    xPost?: boolean | number
    __typename?: boolean | number
}

export interface PostsItemFilterInput {AND?: (PostsItemFilterInput | null),OR?: (PostsItemFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),date?: (DateFilter | null),excerpt?: (StringFilter | null),xPost?: (StringFilter | null)}

export interface PostsSectionGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    header?: SectionHeaderComponentGenqlSelection
    posts?: (PostsGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (PostsItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (PostsItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
}

export interface QueryGenqlSelection{
    _agent?: (_AgentStartGenqlSelection & { __args: {
    /** The ID of the agent. */
    id: Scalars['String']} })
    /** Query across the custom AI agents in the repository. */
    _agents?: _agentsGenqlSelection
    /** Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key. */
    _componentInstances?: _componentsGenqlSelection
    /** The structure of the repository. Used by START. */
    _structure?: { __args: {
    /** The format of the structure. */
    format?: (_StructureFormatEnum | null), 
    /** The format of the structure. */
    resolveTargetsWith?: (_ResolveTargetsWithEnum | null), 
    /** A target block to forcefully resolve in the schema. */
    targetBlock?: (TargetBlock | null), 
    /** Whether to include constraints in the structure. */
    withConstraints?: (Scalars['Boolean'] | null), 
    /** Whether to include IDs in the structure. */
    withIDs?: (Scalars['Boolean'] | null), 
    /** Whether to include type options in the structure. */
    withTypeOptions?: (Scalars['Boolean'] | null)} } | boolean | number
    _sys?: RepoSysGenqlSelection
    components?: ComponentsGenqlSelection
    index?: IndexGenqlSelection
    settings?: SettingsGenqlSelection
    __typename?: boolean | number
}

export interface RepoSysGenqlSelection{
    branches?: (_BranchesGenqlSelection & { __args?: {limit?: (Scalars['Int'] | null), offset?: (Scalars['Int'] | null)} })
    hash?: boolean | number
    id?: boolean | number
    playgroundInfo?: _PlaygroundInfoGenqlSelection
    slug?: boolean | number
    title?: boolean | number
    __typename?: boolean | number
}

export interface RichTextJsonGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    on_BaseRichTextJson?: BaseRichTextJsonGenqlSelection
    on_BioRichText?: BioRichTextGenqlSelection
    on_BodyRichText?: BodyRichTextGenqlSelection
    on_ContentRichText?: ContentRichTextGenqlSelection
    on_Content_1RichText?: Content_1RichTextGenqlSelection
    on_SubtitleRichText?: SubtitleRichTextGenqlSelection
    __typename?: boolean | number
}

export interface SectionHeaderComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    subtitle?: SubtitleGenqlSelection
    title?: boolean | number
    __typename?: boolean | number
}

export interface SectionHeaderComponentFilterInput {AND?: (SectionHeaderComponentFilterInput | null),OR?: (SectionHeaderComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),title?: (StringFilter | null)}

export interface SelectFilter {excludes?: (Scalars['String'] | null),excludesAll?: (Scalars['String'][] | null),includes?: (Scalars['String'] | null),includesAll?: (Scalars['String'][] | null),includesAny?: (Scalars['String'][] | null),isEmpty?: (Scalars['Boolean'] | null)}

export interface SettingsGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    fonts?: FontsGenqlSelection
    header?: HeaderGenqlSelection
    meta?: MetaComponentGenqlSelection
    __typename?: boolean | number
}

export interface SignupsGenqlSelection{
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey?: boolean | number
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey?: boolean | number
    schema?: boolean | number
    __typename?: boolean | number
}

export interface StringFilter {contains?: (Scalars['String'] | null),endsWith?: (Scalars['String'] | null),eq?: (Scalars['String'] | null),in?: (Scalars['String'][] | null),isNull?: (Scalars['Boolean'] | null),matches?: (StringMatchesFilter | null),notEq?: (Scalars['String'] | null),notIn?: (Scalars['String'][] | null),startsWith?: (Scalars['String'] | null)}

export interface StringMatchesFilter {caseSensitive?: (Scalars['Boolean'] | null),pattern: Scalars['String']}

export interface SubtitleGenqlSelection{
    html?: { __args: {
    /** It automatically generates a unique id for each heading present in the HTML. Enabled by default. */
    slugs?: (Scalars['Boolean'] | null), 
    /** Inserts a table of contents at the beginning of the HTML. */
    toc?: (Scalars['Boolean'] | null)} } | boolean | number
    json?: SubtitleRichTextGenqlSelection
    markdown?: boolean | number
    plainText?: boolean | number
    readingTime?: { __args: {
    /** Words per minute, defaults to average 183wpm */
    wpm?: (Scalars['Int'] | null)} } | boolean | number
    __typename?: boolean | number
}

export interface SubtitleRichTextGenqlSelection{
    content?: boolean | number
    toc?: boolean | number
    __typename?: boolean | number
}

export interface TargetBlock {focus?: (Scalars['Boolean'] | null),id: Scalars['String'],label: Scalars['String']}

export interface TransactionStatusGenqlSelection{
    /** Duration in milliseconds. */
    duration?: boolean | number
    endedAt?: boolean | number
    id?: boolean | number
    message?: boolean | number
    startedAt?: boolean | number
    status?: boolean | number
    __typename?: boolean | number
}

export interface UnionCalloutComponentPopoverComponentGenqlSelection{
    on_CalloutComponent?:CalloutComponentGenqlSelection,
    on_PopoverComponent?:PopoverComponentGenqlSelection,
    on_BlockDocument?: BlockDocumentGenqlSelection,
    __typename?: boolean | number
}

export interface UnionPopoverComponentGenqlSelection{
    on_PopoverComponent?:PopoverComponentGenqlSelection,
    on_BlockDocument?: BlockDocumentGenqlSelection,
    __typename?: boolean | number
}

export interface VariantGenqlSelection{
    apiName?: boolean | number
    color?: boolean | number
    id?: boolean | number
    isDefault?: boolean | number
    label?: boolean | number
    __typename?: boolean | number
}

export interface ViewsGenqlSelection{
    /** The `adminKey` gives clients the ability to query, delete and update this block's data. **It's not meant to be exposed to the public.** */
    adminKey?: boolean | number
    /** The `ingestKey` gives clients the ability to send new events to this block. Generally, it's safe to expose it to the public. */
    ingestKey?: boolean | number
    schema?: boolean | number
    __typename?: boolean | number
}

export interface WriteComponentGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    clicks?: ClicksGenqlSelection
    href?: boolean | number
    icon?: boolean | number
    label?: boolean | number
    __typename?: boolean | number
}

export interface WriteComponentFilterInput {AND?: (WriteComponentFilterInput | null),OR?: (WriteComponentFilterInput | null),_id?: (StringFilter | null),_slug?: (StringFilter | null),_sys_apiNamePath?: (StringFilter | null),_sys_createdAt?: (DateFilter | null),_sys_hash?: (StringFilter | null),_sys_id?: (StringFilter | null),_sys_idPath?: (StringFilter | null),_sys_lastModifiedAt?: (DateFilter | null),_sys_slug?: (StringFilter | null),_sys_slugPath?: (StringFilter | null),_sys_title?: (StringFilter | null),_title?: (StringFilter | null),href?: (StringFilter | null),icon?: (SelectFilter | null),label?: (StringFilter | null)}

export interface _AgentStartGenqlSelection{
    _agentKey?: boolean | number
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    accent?: boolean | number
    avatar?: boolean | number
    chatUrl?: boolean | number
    commit?: boolean | number
    description?: boolean | number
    edit?: boolean | number
    embedUrl?: boolean | number
    getUserInfo?: boolean | number
    grayscale?: boolean | number
    manageBranches?: boolean | number
    mcpUrl?: boolean | number
    model?: boolean | number
    searchTheWeb?: boolean | number
    slackInstallUrl?: boolean | number
    systemPrompt?: boolean | number
    __typename?: boolean | number
}

export interface _BranchInfoGenqlSelection{
    archivedAt?: boolean | number
    archivedBy?: boolean | number
    authorId?: boolean | number
    contributors?: boolean | number
    createdAt?: boolean | number
    description?: boolean | number
    git?: _GitInfoGenqlSelection
    headCommit?: _CommitInfoGenqlSelection
    headCommitId?: boolean | number
    id?: boolean | number
    inlineSuggestionAppliedAt?: boolean | number
    isDefault?: boolean | number
    isInlineSuggestion?: boolean | number
    name?: boolean | number
    playgroundId?: boolean | number
    rollbackCommitId?: boolean | number
    rollbackIsoDate?: boolean | number
    sourceBranchId?: boolean | number
    updatedAt?: boolean | number
    workingRootBlockId?: boolean | number
    __typename?: boolean | number
}

export interface _BranchesGenqlSelection{
    _meta?: ListMetaGenqlSelection
    items?: _BranchInfoGenqlSelection
    __typename?: boolean | number
}

export interface _CommitInfoGenqlSelection{
    authorId?: boolean | number
    branchId?: boolean | number
    contributors?: boolean | number
    createdAt?: boolean | number
    hash?: boolean | number
    id?: boolean | number
    mergeParentCommitId?: boolean | number
    message?: boolean | number
    parentCommitId?: boolean | number
    /** Whether this commit is from a playground branch. */
    playgroundId?: boolean | number
    repoId?: boolean | number
    rootBlockId?: boolean | number
    __typename?: boolean | number
}

export interface _GitInfoGenqlSelection{
    branch?: boolean | number
    deploymentUrl?: boolean | number
    __typename?: boolean | number
}

export interface _PlaygroundInfoGenqlSelection{
    claimUrl?: boolean | number
    editUrl?: boolean | number
    expiresAt?: boolean | number
    id?: boolean | number
    __typename?: boolean | number
}

export interface _agentsGenqlSelection{
    start?: _AgentStartGenqlSelection
    __typename?: boolean | number
}

export interface _componentsGenqlSelection{
    callout?: (calloutComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (CalloutComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (CalloutComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    link?: (linkComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (LinkComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (LinkComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    meta?: (metaComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (MetaComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (MetaComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    popover?: (popoverComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (PopoverComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (PopoverComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    postsItem?: (postsItem_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (PostsItemFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (PostsItemOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    sectionHeader?: (sectionHeaderComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (SectionHeaderComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (SectionHeaderComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    write?: (writeComponent_AsListGenqlSelection & { __args?: {
    /** Filter by a field. */
    filter?: (WriteComponentFilterInput | null), 
    /** Limit the number of items returned. Defaults to 500. */
    first?: (Scalars['Int'] | null), 
    /** Order by a field. */
    orderBy?: (WriteComponentOrderByEnum | null), 
    /** Skip the first n items. */
    skip?: (Scalars['Int'] | null)} })
    __typename?: boolean | number
}

export interface calloutComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: CalloutComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: CalloutComponentGenqlSelection
    __typename?: boolean | number
}

export interface linkComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: LinkComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: LinkComponentGenqlSelection
    __typename?: boolean | number
}

export interface metaComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: MetaComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: MetaComponentGenqlSelection
    __typename?: boolean | number
}

export interface popoverComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: PopoverComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: PopoverComponentGenqlSelection
    __typename?: boolean | number
}

export interface postsItem_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: PostsItemGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: PostsItemGenqlSelection
    __typename?: boolean | number
}

export interface sectionHeaderComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: SectionHeaderComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: SectionHeaderComponentGenqlSelection
    __typename?: boolean | number
}

export interface writeComponent_AsListGenqlSelection{
    _analyticsKey?: { __args: {
    /**
     * The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
     * 
     * Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
     */
    scope?: (AnalyticsKeyScope | null)} } | boolean | number
    _dashboardUrl?: boolean | number
    _id?: boolean | number
    _idPath?: boolean | number
    _meta?: ListMetaGenqlSelection
    /** The key used to search from the frontend. */
    _searchKey?: boolean | number
    _slug?: boolean | number
    _slugPath?: boolean | number
    _sys?: BlockDocumentSysGenqlSelection
    _title?: boolean | number
    /** Returns the first item in the list, or null if the list is empty. Useful when you expect only one result. */
    item?: WriteComponentGenqlSelection
    /** Returns the list of items after filtering and paginating according to the arguments sent by the client. */
    items?: WriteComponentGenqlSelection
    __typename?: boolean | number
}

export interface FragmentsMap {
  BaseRichTextJson: {
    root: BaseRichTextJson,
    selection: BaseRichTextJsonGenqlSelection,
}
  Bio: {
    root: Bio,
    selection: BioGenqlSelection,
}
  BioRichText: {
    root: BioRichText,
    selection: BioRichTextGenqlSelection,
}
  BlockAudio: {
    root: BlockAudio,
    selection: BlockAudioGenqlSelection,
}
  BlockCodeSnippet: {
    root: BlockCodeSnippet,
    selection: BlockCodeSnippetGenqlSelection,
}
  BlockColor: {
    root: BlockColor,
    selection: BlockColorGenqlSelection,
}
  BlockDocument: {
    root: BlockDocument,
    selection: BlockDocumentGenqlSelection,
}
  BlockDocumentSys: {
    root: BlockDocumentSys,
    selection: BlockDocumentSysGenqlSelection,
}
  BlockFile: {
    root: BlockFile,
    selection: BlockFileGenqlSelection,
}
  BlockImage: {
    root: BlockImage,
    selection: BlockImageGenqlSelection,
}
  BlockList: {
    root: BlockList,
    selection: BlockListGenqlSelection,
}
  BlockOgImage: {
    root: BlockOgImage,
    selection: BlockOgImageGenqlSelection,
}
  BlockRichText: {
    root: BlockRichText,
    selection: BlockRichTextGenqlSelection,
}
  BlockVideo: {
    root: BlockVideo,
    selection: BlockVideoGenqlSelection,
}
  Body: {
    root: Body,
    selection: BodyGenqlSelection,
}
  BodyRichText: {
    root: BodyRichText,
    selection: BodyRichTextGenqlSelection,
}
  CalloutComponent: {
    root: CalloutComponent,
    selection: CalloutComponentGenqlSelection,
}
  Clicks: {
    root: Clicks,
    selection: ClicksGenqlSelection,
}
  Components: {
    root: Components,
    selection: ComponentsGenqlSelection,
}
  Content: {
    root: Content,
    selection: ContentGenqlSelection,
}
  ContentRichText: {
    root: ContentRichText,
    selection: ContentRichTextGenqlSelection,
}
  Content_1: {
    root: Content_1,
    selection: Content_1GenqlSelection,
}
  Content_1RichText: {
    root: Content_1RichText,
    selection: Content_1RichTextGenqlSelection,
}
  Fonts: {
    root: Fonts,
    selection: FontsGenqlSelection,
}
  GetUploadSignedURL: {
    root: GetUploadSignedURL,
    selection: GetUploadSignedURLGenqlSelection,
}
  Header: {
    root: Header,
    selection: HeaderGenqlSelection,
}
  Index: {
    root: Index,
    selection: IndexGenqlSelection,
}
  LinkComponent: {
    root: LinkComponent,
    selection: LinkComponentGenqlSelection,
}
  Links: {
    root: Links,
    selection: LinksGenqlSelection,
}
  ListMeta: {
    root: ListMeta,
    selection: ListMetaGenqlSelection,
}
  MediaBlock: {
    root: MediaBlock,
    selection: MediaBlockGenqlSelection,
}
  MetaComponent: {
    root: MetaComponent,
    selection: MetaComponentGenqlSelection,
}
  Mutation: {
    root: Mutation,
    selection: MutationGenqlSelection,
}
  NavLinks: {
    root: NavLinks,
    selection: NavLinksGenqlSelection,
}
  NewsletterSection: {
    root: NewsletterSection,
    selection: NewsletterSectionGenqlSelection,
}
  NowSection: {
    root: NowSection,
    selection: NowSectionGenqlSelection,
}
  PopoverComponent: {
    root: PopoverComponent,
    selection: PopoverComponentGenqlSelection,
}
  Posts: {
    root: Posts,
    selection: PostsGenqlSelection,
}
  PostsItem: {
    root: PostsItem,
    selection: PostsItemGenqlSelection,
}
  PostsSection: {
    root: PostsSection,
    selection: PostsSectionGenqlSelection,
}
  Query: {
    root: Query,
    selection: QueryGenqlSelection,
}
  RepoSys: {
    root: RepoSys,
    selection: RepoSysGenqlSelection,
}
  RichTextJson: {
    root: RichTextJson,
    selection: RichTextJsonGenqlSelection,
}
  SectionHeaderComponent: {
    root: SectionHeaderComponent,
    selection: SectionHeaderComponentGenqlSelection,
}
  Settings: {
    root: Settings,
    selection: SettingsGenqlSelection,
}
  Signups: {
    root: Signups,
    selection: SignupsGenqlSelection,
}
  Subtitle: {
    root: Subtitle,
    selection: SubtitleGenqlSelection,
}
  SubtitleRichText: {
    root: SubtitleRichText,
    selection: SubtitleRichTextGenqlSelection,
}
  TransactionStatus: {
    root: TransactionStatus,
    selection: TransactionStatusGenqlSelection,
}
  Variant: {
    root: Variant,
    selection: VariantGenqlSelection,
}
  Views: {
    root: Views,
    selection: ViewsGenqlSelection,
}
  WriteComponent: {
    root: WriteComponent,
    selection: WriteComponentGenqlSelection,
}
  _AgentStart: {
    root: _AgentStart,
    selection: _AgentStartGenqlSelection,
}
  _BranchInfo: {
    root: _BranchInfo,
    selection: _BranchInfoGenqlSelection,
}
  _Branches: {
    root: _Branches,
    selection: _BranchesGenqlSelection,
}
  _CommitInfo: {
    root: _CommitInfo,
    selection: _CommitInfoGenqlSelection,
}
  _GitInfo: {
    root: _GitInfo,
    selection: _GitInfoGenqlSelection,
}
  _PlaygroundInfo: {
    root: _PlaygroundInfo,
    selection: _PlaygroundInfoGenqlSelection,
}
  _agents: {
    root: _agents,
    selection: _agentsGenqlSelection,
}
  _components: {
    root: _components,
    selection: _componentsGenqlSelection,
}
  calloutComponent_AsList: {
    root: calloutComponent_AsList,
    selection: calloutComponent_AsListGenqlSelection,
}
  linkComponent_AsList: {
    root: linkComponent_AsList,
    selection: linkComponent_AsListGenqlSelection,
}
  metaComponent_AsList: {
    root: metaComponent_AsList,
    selection: metaComponent_AsListGenqlSelection,
}
  popoverComponent_AsList: {
    root: popoverComponent_AsList,
    selection: popoverComponent_AsListGenqlSelection,
}
  postsItem_AsList: {
    root: postsItem_AsList,
    selection: postsItem_AsListGenqlSelection,
}
  sectionHeaderComponent_AsList: {
    root: sectionHeaderComponent_AsList,
    selection: sectionHeaderComponent_AsListGenqlSelection,
}
  writeComponent_AsList: {
    root: writeComponent_AsList,
    selection: writeComponent_AsListGenqlSelection,
}
}
